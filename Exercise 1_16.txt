Напишите процедуру, которая развивается в виде итеративного процесса и реализует возведение в
степень за логарифмическое число шагов, как fast-expt. (Указание: используя наблюдение, что
(b^n/2)^2 = (b^2)^n/2, храните, помимо значения степени n и основания b, дополнительную перемен-
ную состояния a, и определите переход между состояниями так, чтобы произведение a*b^n от шага к
шагу не менялось. Вначале значение a берется равным 1, а ответ получается как значение a в
момент окончания процесса.

Обычный итеративный процесс:

(define (even? a)
  (cond ((= a 2) #t)
        ((> a 2) (even? (/ a 2)))
        (else #f)))
(define (fast-expt b n)
  (define (square x)
    (* x x))
  (define (fast-expt-iter a n)
    (cond ((= n 1) a)
          ((even? n) (fast-expt-iter (square a) (/ n 2)))
          (else (fast-expt-iter (* a b) (- n 1)))))
  (fast-expt-iter b n))
  
  Процедура fast-expt-iter с использованием инварианта:
  
  (define (fast-expt-iter a b n)
  (cond ((= n 0) a)
        ((even? n) (fast-expt-iter a (square b) (halve n)))
        (else (fast-expt-iter (* a b) b (- n 1)))))
